apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
//    buildToolsVersion '27.0.2'

    defaultConfig {
        applicationId "com.exa"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters "armeabi", "x86"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString(),
                             eventBusIndex        : 'com.exa.eventbus.MyEventBusIndex',
                             mykey                : 'myvalue',
                             AROUTER_MODULE_NAME: project.getName(),
                             AROUTER_GENERATE_DOC: "enable"]
                //生成索引的名称
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}
/*
*
* 此时app作为插件，module "plugin"作为宿主。app包括JNI，为了验证宿主对插件的调用情况。
*
* 关闭，编译速度慢
* */
//apply plugin: 'replugin-plugin-gradle'

dependencies {

    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    compile 'com.alibaba:arouter-api:1.4.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
//    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    /*
    * 注解处理器：
    * 为编译时处理注解提供了可能，而不是运行时通过反射机制处理的注解！
    *
    * 是什么？
    * 是javac的一个工具，它用来在编译时扫描和处理注解（Annotation）
    * 你可以对自定义注解，并注册相应的注解处理器
    *
    * 输入：
    * 以Java代码（或者编译过的字节码）作为输入
    *
    * 输出：
    * 生成文件（通常是.java文件）
    *
    * 这个是自定义的注解处理器。采集"PrintMe"注解的方法信息
    *
    * */
//    annotationProcessor project(':processor')

    compile 'org.greenrobot:eventbus:3.1.1'

    // http://greenrobot.org/eventbus/documentation/subscriber-index/
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.1'

    // 关闭，编译速度慢
//    compile 'com.qihoo360.replugin:replugin-plugin-lib:2.2.4'

    implementation project(':plugin-library')

    /*
    *
    * Java反射库:
    *
    * https://github.com/jOOQ/jOOR
    * */
    implementation 'org.jooq:joor-java-6:0.9.7'

    // chrome://inspect/#devices
    implementation 'com.facebook.stetho:steth' +
            'o:1.5.0'//调试工具
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    def room_version = "1.1.1"

    implementation "android.arch.persistence.room:runtime:$room_version"
    annotationProcessor "android.arch.persistence.room:compiler:$room_version"
    // use kapt for Kotlin

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27+'
    implementation 'com.android.support:recyclerview-v7:27+'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
}